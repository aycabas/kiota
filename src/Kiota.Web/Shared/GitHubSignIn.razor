@using Kiota.Builder.Configuration
@using Kiota.Builder.SearchProviders.GitHub.Authentication
@using Microsoft.Fast.Components.FluentUI
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<GitHubSignIn> Loc
@inject ITokenStorageService TokenStorageService
@inject KiotaConfiguration KiotaConfiguration
<svg fill="black" role="img" viewBox="0 0 24 24" width="32px" height="32px" xmlns="http://www.w3.org/2000/svg">
    <title>@Loc["SVGAltText"]</title>
    <path d="M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12" />
</svg>
&nbsp;
<div class="ghsignin">
    @if(IsSignedIn) {
        <FluentButton @onclick="SignOut" Appearance="Appearance.Neutral">@Loc["SignOut"]</FluentButton>
    } else {
        <FluentButton id="signinbtn" @onclick="SignIn" Appearance="Appearance.Accent">@Loc["SignIn"]</FluentButton>
        <FluentTooltip Anchor="signinbtn" Position=TooltipPosition.Bottom>@Loc["ToolTip"]</FluentTooltip>
    }
</div>
<FluentDialog Modal="true" @ondialogdismiss=OnPatSetDialogDismiss @bind-Hidden=@PatSetDialogHidden>
    <div class="gh-dialog-content">
        <h2>@Loc["PersonalAccessTokenHeader"]</h2>
        <h3>@Loc["PersonalAccessTokenInstructions"]</h3>
        <ol>
            <li>@Loc["PersonalAccessTokenInstructionsStep1"] <a href="https://github.com/settings/personal-access-tokens/new" target="_blank">@Loc["PersonalAccessTokenInstructionsOpen"]</a></li>
            <li>@Loc["PersonalAccessTokenInstructionsStep2"]</li><!--Give a name-->
            <li>@Loc["PersonalAccessTokenInstructionsStep3"]</li><!--Give a resource owner-->
            <li>@Loc["PersonalAccessTokenInstructionsStep4"]</li><!--Optional. Authenticate with resource-->
            <li>@Loc["PersonalAccessTokenInstructionsStep5"]</li><!--All repos or select repos-->
            <li>@Loc["PersonalAccessTokenInstructionsStep6"]</li><!--Under "repository permissions-->
            <li>@Loc["PersonalAccessTokenInstructionsStep7"]</li><!--Click generate token-->
            <li>@Loc["PersonalAccessTokenInstructionsStep8"]</li><!--Copy the value here-->
        </ol>
        <span>@Loc["PersonalAccessTokenDescription"]</span>
        <div class="gh-dialog-content-form">
            <h3>@Loc["PersonalAccessTokenAdd"]</h3>
            <FluentTextField TextFieldType="TextFieldType.Password" Required=true class="full-width-field" @bind-Value=@PersonalAccessToken>@Loc["PersonalAccessToken"]</FluentTextField>
            <FluentDivider Role=DividerRole.Presentation></FluentDivider>
            <FluentButton @onclick="Save" Appearance="Appearance.Accent">@Loc["Save"]</FluentButton>
            <FluentButton @onclick="OnPatSetDialogDismiss" Appearance="Appearance.Neutral">@Loc["Close"]</FluentButton>
        </div>
    </div>
</FluentDialog>

@code {
    private bool PatSetDialogHidden { get; set; } = true;
    private bool IsSignedIn {get; set;}
    private string? PersonalAccessToken {get; set;}
    private void OnPatSetDialogDismiss() {
        PatSetDialogHidden = true;
    }
    protected override async Task OnParametersSetAsync() {
        IsSignedIn = await TokenStorageService.IsTokenPresentAsync(ComponentDetached);
        await base.OnParametersSetAsync();
    }
    private void SignIn() {
        PatSetDialogHidden = false;
    }
    private async Task Save() {
        if(!String.IsNullOrEmpty(PersonalAccessToken)) {
            IsSignedIn = true;
            await TokenStorageService.SetTokenAsync(PersonalAccessToken, ComponentDetached);
            PatSetDialogHidden = true;
            PersonalAccessToken = string.Empty;
        }
    }
    private async Task SignOut() {
        await TokenStorageService.DeleteTokenAsync(ComponentDetached);
        IsSignedIn = false;
    }

}