@page "/update"
@using Microsoft.Extensions.Localization
@using Kiota.Builder.Lock
@inject IStringLocalizer<Update> Loc
@inject NavigationManager navManager


<PageTitle>@Loc["PageTitle"]</PageTitle>

<h1>@Loc["Update"]</h1>

<div>
    <label for="file">@Loc["File"]</label>
    <InputFile OnChange="@LoadFiles" id="file" accept=".json" />
@if(IsFileLoaded) {
    @if(!IsLockFileValid) {
        <p>@Loc["InvalidLockFile"]</p>
    }
    @if(!IsDocumentValid) {
        <p>@Loc["LockFileValid"]</p>
    }
}
</div>

@code {
    private bool IsFileLoaded { get; set; }
    private bool IsLockFileValid { get; set; } = true;
    private bool IsDocumentValid { get; set; } = true;
    [Inject] private IApplicationInsights? AppInsights { get; set; }
    private const string updateClientTelemetryKey = "updateclient";
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsFileLoaded = true;
        var lockService = new LockManagementService();
        if(AppInsights != null)
            await AppInsights.StartTrackEvent(updateClientTelemetryKey).ConfigureAwait(false);
        await using var stream = e.File.OpenReadStream();
        try {
            var lockInfo = await lockService.GetLockFromStreamAsync(stream, ComponentDetached).ConfigureAwait(false);
            IsLockFileValid = true;
            IsDocumentValid = lockInfo.DescriptionLocation.StartsWith("http", StringComparison.OrdinalIgnoreCase);
            if (IsDocumentValid) {
                var includeFilters = !(lockInfo.IncludePatterns?.Any() ?? false) ? string.Empty : string.Join(",", lockInfo.IncludePatterns);
                var excludeFilters = !(lockInfo.ExcludePatterns?.Any() ?? false) ? string.Empty : string.Join(",", lockInfo.ExcludePatterns);
                var serializers = !(lockInfo.Serializers?.Any() ?? false) ? string.Empty : string.Join(",", lockInfo.Serializers);
                var deserializers = !(lockInfo.Deserializers?.Any() ?? false) ? string.Empty : string.Join(",", lockInfo.Deserializers);
                var structuredMimeTypes = !(lockInfo.StructuredMimeTypes?.Any() ?? false) ? string.Empty : string.Join(",", lockInfo.StructuredMimeTypes);
                navManager.NavigateTo($"/generate?d={lockInfo.DescriptionLocation}&i={includeFilters}&e={excludeFilters}" +
                    $"&s={serializers}&ds={deserializers}&m={structuredMimeTypes}&l={lockInfo.Language}" +
                    $"&b={lockInfo.UsesBackingStore}&n={lockInfo.ClientNamespaceName}&c={lockInfo.ClientClassName}"+
                    $"&ad={lockInfo.IncludeAdditionalData}");
            }
        } catch (Exception) {
            IsLockFileValid = false;
        } finally {
            if(AppInsights != null)
                await AppInsights.StopTrackEvent(updateClientTelemetryKey).ConfigureAwait(false);
        }
    }
}