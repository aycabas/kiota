@page "/show"
@using Kiota.Builder
@using Kiota.Builder.SearchProviders
@using Kiota.Builder.Configuration
@using System.Linq
@using System.Text
@using System.Web
@using Microsoft.Fast.Components.FluentUI
@inject ILoggerFactory LoggerFactory
@inject NavigationManager navManager
@using System.Globalization
@using Microsoft.Extensions.Localization
@using Microsoft.Kiota.Abstractions.Authentication;
@inject IStringLocalizer<Show> Loc
@inject HttpClient Http

<PageTitle>@Loc["PageTitle"]</PageTitle>

<h1>@Loc["Show"]</h1>

<div>
    <FluentTextField Required="true" class="full-width-field" @bind-Value=@DescriptionUrl>@Loc["DescriptionUrl"]</FluentTextField>
    <FluentTextArea @bind-Value=@IncludePatterns class="full-width-field" Placeholder="**/messages/**" Rows="10" Resize="TextAreaResize.Vertical">
        <span>@Loc["IncludePatterns"]</span>
    </FluentTextArea>
    <FluentTextArea @bind-Value=@ExcludePatterns class="full-width-field" Placeholder="**/users/**" Rows="10" Resize="TextAreaResize.Vertical">
        <span>@Loc["ExcludePatterns"]</span>
    </FluentTextArea>
    <FluentDivider Role="DividerRole.Separator"></FluentDivider> 
    <FluentButton @onclick="ShowDescription" Appearance="Appearance.Accent">@Loc["ShowButton"]</FluentButton>
    <FluentButton @onclick="GoToGenerate" Appearance="Appearance.Neutral" Disabled="@(string.IsNullOrEmpty(DescriptionUrl))">@Loc["GoToGenerate"]</FluentButton>
    @if(IsLoading) {
        <FluentProgress></FluentProgress>
    }
</div>

@if(!string.IsNullOrEmpty(Tree)) {
    <div>
        <h2>@Loc["ApiPaths"]</h2>
        <fluent-tree-view>@((MarkupString)Tree)</fluent-tree-view>
    </div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery(Name = "k")]
    public string? SearchTermFromQuery { get; set; }
    public string? SearchTerm { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "v")]
    public string? VersionFromQuery { get; set; }
    public string? Version { get; set; }
    [Parameter]
    [SupplyParameterFromQuery(Name = "d")]
    public string? DescriptionUrlFromQuery { get; set; }
    private string? DescriptionUrl { get; set; }
    private IDictionary<string, SearchResult> SearchResults = new Dictionary<string, SearchResult>();
    private string? IncludePatterns { get; set; }
    private string? ExcludePatterns { get; set; }
    private string? Tree { get; set; }
    private bool IsLoading { get; set; }
    [Inject] private IApplicationInsights? AppInsights { get; set; }
    [Inject] private KiotaSearcher? KiotaSearcher { get; set; }
    protected override async Task OnParametersSetAsync() {
        if(!string.IsNullOrEmpty(SearchTermFromQuery))
            SearchTerm = SearchTermFromQuery;
        if(!string.IsNullOrEmpty(VersionFromQuery))
            Version = VersionFromQuery;
        if(!string.IsNullOrEmpty(DescriptionUrlFromQuery))
            DescriptionUrl = DescriptionUrlFromQuery;
        if (!string.IsNullOrEmpty(SearchTerm) && !string.IsNullOrEmpty(Version) && string.IsNullOrEmpty(DescriptionUrl) && KiotaSearcher != null) {
            var searchResults = await KiotaSearcher.SearchAsync(SearchTerm, Version, ComponentDetached);
            if(searchResults.Any())
                DescriptionUrl = searchResults.Values.First().DescriptionUrl.ToString();
        }
        await base.OnParametersSetAsync();
    }
    private const string goToGenerateTelemetryKey = "gotogenerate";
    private async Task GoToGenerate() {
        if(!string.IsNullOrEmpty(DescriptionUrl))
        {
            if(AppInsights != null)
                await AppInsights.StartTrackEvent(goToGenerateTelemetryKey).ConfigureAwait(false);
            var includeFilters = string.IsNullOrEmpty(IncludePatterns) ? string.Empty : string.Join(",", IncludePatterns
                                .Split(new [] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(static x => x.Trim()));
            var excludeFilters = string.IsNullOrEmpty(ExcludePatterns) ? string.Empty : string.Join(",", ExcludePatterns
                                .Split(new [] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries)
                                .Select(static x => x.Trim()));
            if(AppInsights != null)
                await AppInsights.StopTrackEvent(goToGenerateTelemetryKey, new Dictionary<string, string?> {
                    { "includePatterns", IncludePatterns },
                    { "excludePatterns", ExcludePatterns },
                }).ConfigureAwait(false);
            navManager.NavigateTo($"/generate?d={DescriptionUrl}&i={includeFilters}&e={excludeFilters}");
        }
    }
    private Task ShowDescription() {
        IsLoading = true;
        return ShowDescriptionInternal();
    }
    private KiotaBuilder? kiotaBuilder;
    private GenerationConfiguration? generationConfiguration;
    private const string showDescriptionTelemetryKey = "showdescription";
    private async Task ShowDescriptionInternal() {
        Tree = string.Empty;
        if (string.IsNullOrEmpty(DescriptionUrl) && KiotaSearcher != null) {
            SearchResults = await KiotaSearcher.SearchAsync(SearchTerm, Version, ComponentDetached);
            DescriptionUrl = SearchResults.First().Value.DescriptionUrl.ToString();
        }
        if(AppInsights != null)
            await AppInsights.StartTrackEvent(showDescriptionTelemetryKey).ConfigureAwait(false);
        
        if (kiotaBuilder == null || (!(generationConfiguration?.OpenAPIFilePath.Equals(DescriptionUrl, StringComparison.OrdinalIgnoreCase) ?? false))) {
            generationConfiguration = new GenerationConfiguration{
                OpenAPIFilePath = DescriptionUrl,
            };
            var builderLogger = LoggerFactory.CreateLogger<KiotaBuilder>();
            kiotaBuilder = new KiotaBuilder(builderLogger, generationConfiguration, Http);
        }
        generationConfiguration.IncludePatterns = IncludePatterns?.Split('\n', StringSplitOptions.RemoveEmptyEntries).Select(static x => x.Trim()).ToHashSet();
        generationConfiguration.ExcludePatterns = ExcludePatterns?.Split('\n', StringSplitOptions.RemoveEmptyEntries).Select(static x => x.Trim()).ToHashSet();
        var urlTreeNode = await kiotaBuilder.GetUrlTreeNodeAsync(ComponentDetached).ConfigureAwait(false);

        var builder = new StringBuilder();
        RenderNode(urlTreeNode, 10, builder);
        Tree = builder.ToString();
        IsLoading = false;
        if(AppInsights != null)
            await AppInsights.StopTrackEvent(showDescriptionTelemetryKey, new Dictionary<string, string?> {
                { "includePatterns", IncludePatterns },
                { "excludePatterns", ExcludePatterns },
            }).ConfigureAwait(false);
    }
    private static void RenderNode(Microsoft.OpenApi.Services.OpenApiUrlTreeNode node, uint maxDepth, StringBuilder builder, string indent = "", int nodeDepth = 0)
    {
        builder.AppendLine($"<fluent-tree-item{(nodeDepth < 2 ? " expanded" : string.Empty)}>");
        builder.AppendLine(HttpUtility.HtmlEncode(node.Segment));

        var children = node.Children;
        var numberOfChildren = children.Count;
        for (var i = 0; i < numberOfChildren; i++)
        {
            var child = children.ElementAt(i);
            RenderChildNode(child.Value, maxDepth, builder, indent, nodeDepth);
        }
        builder.AppendLine("</fluent-tree-item>");
    }

    private static void RenderChildNode(Microsoft.OpenApi.Services.OpenApiUrlTreeNode node, uint maxDepth, StringBuilder builder, string indent, int nodeDepth = 0)
    {
        if (nodeDepth >= maxDepth && maxDepth != 0)
            return;
        RenderNode(node, maxDepth, builder, indent, nodeDepth + 1);
    }
}
